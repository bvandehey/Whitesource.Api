<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Whitesource.Api</name>
    </assembly>
    <members>
        <member name="T:Whitesource.Api.BaseWhitesourceService">
            <summary>
            The WhitesourceService is the main service for integrating with the Whitesource API.
            </summary>
            <seealso cref="T:Whitesource.Api.WhitesourceServiceAsync"/>
        </member>
        <member name="M:Whitesource.Api.BaseWhitesourceService.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the Whitesource API service.
            </summary>
            <param name="userKey">The Whitesource user key for accessing the API.</param>
            <param name="apiUrl">The URL to the API service or null to use the default.</param>
        </member>
        <member name="P:Whitesource.Api.BaseWhitesourceService.UserKey">
            <summary>
            Gets the Whitesource user key for accessing the API.
            </summary>
            <value>The Whitesource user key.</value>
        </member>
        <member name="P:Whitesource.Api.BaseWhitesourceService.ApiUrl">
            <summary>
            Gets the URL for the Whitesource API.
            </summary>
            <value>The Whitesource API URL.</value>
        </member>
        <member name="T:Whitesource.Api.Token.BaseToken">
            <summary>
            The BaseToken is an abstract class that is used as the basic for the <see cref="T:Whitesource.Api.Token.OrgToken" />,
            <see cref="T:Whitesource.Api.Token.ProductToken" /> and <see cref="T:Whitesource.Api.Token.ProjectToken" />. Having distinct classes for the
            different types of tokens allows the compiler to prevent passing the wrong type of token
            to a method.
            </summary>
        </member>
        <member name="M:Whitesource.Api.Token.BaseToken.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Whitesource.Api.Token.BaseToken"/> class.
            </summary>
            <param name="token">The token to assign to this instance.</param>
        </member>
        <member name="P:Whitesource.Api.Token.BaseToken.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="M:Whitesource.Api.Token.BaseToken.op_Implicit(Whitesource.Api.Token.BaseToken)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Whitesource.Api.Token.BaseToken"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="token">The token to convert to a string.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Whitesource.Api.Token.BaseToken.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> of the token associated with this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> string of the token associated with this instance.</returns>
        </member>
        <member name="T:Whitesource.Api.Token.OrgToken">
            <summary>
            The OrgToken class contains the Whitesource Organization token
            Implements the <see cref="T:Whitesource.Api.Token.BaseToken" />
            </summary>
            <seealso cref="T:Whitesource.Api.Token.BaseToken" />
        </member>
        <member name="M:Whitesource.Api.Token.OrgToken.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Whitesource.Api.Token.OrgToken"/> class.
            </summary>
            <param name="token">The token to assign to this instance.</param>
        </member>
        <member name="T:Whitesource.Api.Token.ProductToken">
            <summary>
            The ProductToken class contains the Whitesource Product token
            Implements the <see cref="T:Whitesource.Api.Token.BaseToken" />
            </summary>
            <seealso cref="T:Whitesource.Api.Token.BaseToken" />
        </member>
        <member name="M:Whitesource.Api.Token.ProductToken.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Whitesource.Api.Token.ProductToken"/> class.
            </summary>
            <param name="token">The token to assign to this instance.</param>
        </member>
        <member name="T:Whitesource.Api.Token.ProjectToken">
            <summary>
            The ProjectToken class contains the Whitesource Project token
            Implements the <see cref="T:Whitesource.Api.Token.BaseToken" />
            </summary>
            <seealso cref="T:Whitesource.Api.Token.BaseToken" />
        </member>
        <member name="M:Whitesource.Api.Token.ProjectToken.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Whitesource.Api.Token.ProjectToken"/> class.
            </summary>
            <param name="token">The token to assign to this instance.</param>
        </member>
        <member name="T:Whitesource.Api.WhitesourceRequestException">
            <summary>
            The WhitesourceRequestException is raised when an error occurs when
            communicating with the Whitesource API.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Whitesource.Api.WhitesourceRequestException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Whitesource.Api.WhitesourceRequestException"/> class.
            </summary>
        </member>
        <member name="M:Whitesource.Api.WhitesourceRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Whitesource.Api.WhitesourceRequestException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Whitesource.Api.WhitesourceRequestException.#ctor(Whitesource.Api.Response.BaseResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Whitesource.Api.WhitesourceRequestException"/> class.
            </summary>
            <param name="response">The error response that contains the error information.</param>
        </member>
        <member name="M:Whitesource.Api.WhitesourceRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Whitesource.Api.WhitesourceRequestException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Whitesource.Api.WhitesourceRequestException.ErrorCode">
            <summary>
            Gets the error code associated with this exception.
            </summary>
            <value>The error code associated with this exception.</value>
        </member>
        <member name="T:Whitesource.Api.WhitesourceService">
            <summary>
            The WhitesourceService is the main service for integrating with the Whitesource API.
            </summary>
            <seealso cref="T:Whitesource.Api.WhitesourceServiceAsync"/>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the Whitesource API service.
            </summary>
            <param name="userKey">The Whitesource user key for accessing the API.</param>
            <param name="apiUrl">The URL to the API service or null to use the default.</param>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetOrganizationAlerts(Whitesource.Api.Token.OrgToken)">
            <summary>
            Returns a list of alerts for a given organization.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <returns>Returns a list of alerts for the given organization token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProductAlerts(Whitesource.Api.Token.ProductToken)">
            <summary>
            Returns a list of alerts for a given product.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns a list of alerts for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProjectAlerts(Whitesource.Api.Token.ProjectToken)">
            <summary>
            Returns a list of alerts for a given project.
            </summary>
            <param name="projectToken">The Whitesource project token for the target project.</param>
            <returns>Returns a list of alerts for the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetAlertsByProjectTag(Whitesource.Api.Token.OrgToken,System.String,System.String)">
            <summary>
            Returns a list of alerts for a given project with the specified tag.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target project.</param>
            <param name="tagKey">The project tag key to filter the projects.</param>
            <param name="tagValue">The project tag value to filter the projects.</param>
            <returns>Returns a list of alerts for the given organization token filter by the specified tag.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetOrganizationAlertsByType(Whitesource.Api.Token.OrgToken,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Returns a list of alerts for a given organization with the specified type.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <param name="alertType">Type of the alert to use to filter the alerts.</param>
            <param name="fromDate">An optional parameter that filters alerts after this date.</param>
            <param name="toDate">An optional parameter that filters alerts before this date.</param>
            <returns>Returns a list of alerts for the given organization token filtered by the specified type.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProductAlertsByType(Whitesource.Api.Token.ProductToken,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>Returns a list of alerts for a given product with the specified type.</summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <param name="alertType">The alert type to use to filter the alerts.</param>
            <param name="fromDate">An optional parameter that filters alerts after this date.</param>
            <param name="toDate">An optional parameter that filters alerts before this date.</param>
            <returns>Returns a list of alerts for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProjectAlertsByType(Whitesource.Api.Token.ProjectToken,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Returns a list of alerts for a given project with the specified type.
            </summary>
            <param name="projectToken">The Whitesource project token for the target project.</param>
            <param name="alertType">The alert type to use to filter the alerts.</param>
            <param name="fromDate">An optional parameter that filters alerts after this date.</param>
            <param name="toDate">An optional parameter that filters alerts before this date.</param>
            <returns>Returns a list of alerts for the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetOrganizationLicenses(Whitesource.Api.Token.OrgToken)">
            <summary>
            Returns a list of libraries and their licenses for a given organization.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <returns>Returns a list of libraries and their licenses for the given organization token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProductLicenses(Whitesource.Api.Token.ProductToken)">
            <summary>
            Returns a list of libraries and their licenses for a given product.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns a list of libraries and their licenses for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProjectLicenses(Whitesource.Api.Token.ProjectToken)">
            <summary>
            Returns a list of libraries and their licenses for a given product.
            </summary>
            <param name="projectToken">The Whitesource project token for the target project.</param>
            <returns>Returns a list of libraries and their licenses for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetOrganizationLicenseHistogram(Whitesource.Api.Token.OrgToken)">
            <summary>
            Returns a dictionary of licenses and counts for a given organization.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <returns>Returns a dictionary of licenses and counts for a given organization.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProductLicenseHistogram(Whitesource.Api.Token.ProductToken)">
            <summary>
            Returns a dictionary of licenses and counts for a given product.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns a dictionary of licenses and counts for a given product.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProjectLicenseHistogram(Whitesource.Api.Token.ProjectToken)">
            <summary>
            Returns a dictionary of licenses and counts for a given project.
            </summary>
            <param name="projectToken">The Whitesource project token for the target project.</param>
            <returns>Returns a dictionary of licenses and counts for a given project.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetAllProducts(Whitesource.Api.Token.OrgToken)">
            <summary>
            Returns a list of products for a given organization.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <returns>Returns a list of products for the given organization token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetAllProjects(Whitesource.Api.Token.ProductToken)">
            <summary>
            Returns a list of projects for a given product.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns a list of projects for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetOrganizationProjectVitals(Whitesource.Api.Token.OrgToken)">
            <summary>
            Get basic information regarding all projects within the organization: name, token, creation date and last updated date.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <returns>Returns a list of projects for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetOrganizationProductVitals(Whitesource.Api.Token.OrgToken)">
            <summary>
            Get basic information regarding all products within the organization: name, token, creation date and last updated date.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <returns>Returns the vitals within the organization for all products.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProductProjectVitals(Whitesource.Api.Token.ProductToken)">
            <summary>
            Get basic information regarding all projects for a specific product: name, token, creation date and last updated date.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns the vitals within the organization for all products.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProjectVitals(Whitesource.Api.Token.ProjectToken)">
            <summary>
            Get basic information for a specific project: name, token, creation date and last updated date.
            </summary>
            <param name="projectToken">The project token.</param>
            <returns>Returns the vitals within the organization for all products.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProductLibraryLocations(Whitesource.Api.Token.ProductToken)">
            <summary>
            Returns a list of library locations for a given product.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns a list of library locations for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProjectLibraryLocations(Whitesource.Api.Token.ProjectToken)">
            <summary>
            Returns a list of library locations for a given project.
            </summary>
            <param name="projectToken">The Whitesource project token for the target project.</param>
            <returns>Returns a list of library locations for the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProjectHierarchy(Whitesource.Api.Token.ProjectToken,System.Boolean)">
            <summary>
            Returns the library hierarchy for a given project.
            </summary>
            <param name="projectToken">The project token.</param>
            <param name="includeInHouseData">An optional parameter to determine whether in-house data should be included 
            in the hierarchy. The default is <c>true</c> which means to include the in-house data.</param>
            <returns>Returns a the library hierarchy for the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProjectInventory(Whitesource.Api.Token.ProjectToken,System.Boolean)">
            <summary>
            Returns the library inventory for a given project.
            </summary>
            <param name="projectToken">The project token.</param>
            <param name="includeInHouseData">An optional parameter to determine whether in-house data should be included 
            in the hierarchy. The default is <c>true</c> which means to include the in-house data.</param>
            <returns>Returns the library inventory for the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProjectState(Whitesource.Api.Token.ProjectToken)">
            <summary>
            Returns the state for a given project.
            </summary>
            <param name="projectToken">The project token.</param>
            <returns>Returns the project state for the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetLibrarySourceFiles(Whitesource.Api.Token.ProjectToken,System.String)">
            <summary>
            Returns the source files for a library within a given project.
            </summary>
            <param name="projectToken">The project token.</param>
            <param name="uuid">The UUID for the library to retrieve source files for.</param>
            <returns>Returns the source files for a library within the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetProjectLibraryDependencies(Whitesource.Api.Token.ProjectToken,System.String)">
            <summary>
            Returns the dependencies for a library within a given project.
            </summary>
            <param name="projectToken">The project token.</param>
            <param name="uuid">The UUID for the library to retrieve the dependencies for.</param>
            <returns>Returns the source files for a library within the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceService.GetLicensesTextZip(Whitesource.Api.Token.ProductToken)">
            <summary>
            Returns a zipfile containing the text of all of licenses for a given product.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns a zipfile containing the text of all of licenses for a given product.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="T:Whitesource.Api.WhitesourceServiceAsync">
            <summary>
            The WhitesourceServiceAsync is the main service for integrating with the Whitesource API
            using the async pattern.
            </summary>
            <seealso cref="T:Whitesource.Api.WhitesourceService"/>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the Whitesource API service.
            </summary>
            <param name="userKey">The Whitesource user key for accessing the API.</param>
            <param name="apiUrl">The URL to the API service or null to use the default.</param>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetOrganizationAlertsAsync(Whitesource.Api.Token.OrgToken)">
            <summary>
            Returns a list of alerts for a given organization.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <returns>Returns a list of alerts for the given organization token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProductAlertsAsync(Whitesource.Api.Token.ProductToken)">
            <summary>
            Returns a list of alerts for a given product.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns a list of alerts for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProjectAlertsAsync(Whitesource.Api.Token.ProjectToken)">
            <summary>
            Returns a list of alerts for a given project.
            </summary>
            <param name="projectToken">The Whitesource project token for the target project.</param>
            <returns>Returns a list of alerts for the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetAlertsByProjectTagAsync(Whitesource.Api.Token.OrgToken,System.String,System.String)">
            <summary>
            Returns a list of alerts for a given project with the specified tag.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target project.</param>
            <param name="tagKey">The project tag key to filter the projects.</param>
            <param name="tagValue">The project tag value to filter the projects.</param>
            <returns>Returns a list of alerts for the given organization token filter by the specified tag.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetOrganizationAlertsByTypeAsync(Whitesource.Api.Token.OrgToken,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Returns a list of alerts for a given organization with the specified type.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <param name="alertType">Type of the alert to use to filter the alerts.</param>
            <param name="fromDate">An optional parameter that filters alerts after this date.</param>
            <param name="toDate">An optional parameter that filters alerts before this date.</param>
            <returns>Returns a list of alerts for the given organization token filtered by the specified type.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProductAlertsByTypeAsync(Whitesource.Api.Token.ProductToken,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>Returns a list of alerts for a given product with the specified type.</summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <param name="alertType">The alert type to use to filter the alerts.</param>
            <param name="fromDate">An optional parameter that filters alerts after this date.</param>
            <param name="toDate">An optional parameter that filters alerts before this date.</param>
            <returns>Returns a list of alerts for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProjectAlertsByTypeAsync(Whitesource.Api.Token.ProjectToken,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Returns a list of alerts for a given project with the specified type.
            </summary>
            <param name="projectToken">The Whitesource project token for the target project.</param>
            <param name="alertType">The alert type to use to filter the alerts.</param>
            <param name="fromDate">An optional parameter that filters alerts after this date.</param>
            <param name="toDate">An optional parameter that filters alerts before this date.</param>
            <returns>Returns a list of alerts for the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetOrganizationLicensesAsync(Whitesource.Api.Token.OrgToken)">
            <summary>
            Returns a list of libraries and their licenses for a given organization.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <returns>Returns a list of libraries and their licenses for the given organization token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProductLicensesAsync(Whitesource.Api.Token.ProductToken)">
            <summary>
            Returns a list of libraries and their licenses for a given product.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns a list of libraries and their licenses for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProjectLicensesAsync(Whitesource.Api.Token.ProjectToken)">
            <summary>
            Returns a list of libraries and their licenses for a given product.
            </summary>
            <param name="projectToken">The Whitesource project token for the target project.</param>
            <returns>Returns a list of libraries and their licenses for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetOrganizationLicenseHistogramAsync(Whitesource.Api.Token.OrgToken)">
            <summary>
            Returns a dictionary of licenses and counts for a given organization.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <returns>Returns a dictionary of licenses and counts for a given organization.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProductLicenseHistogramAsync(Whitesource.Api.Token.ProductToken)">
            <summary>
            Returns a dictionary of licenses and counts for a given product.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns a dictionary of licenses and counts for a given product.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProjectLicenseHistogramAsync(Whitesource.Api.Token.ProjectToken)">
            <summary>
            Returns a dictionary of licenses and counts for a given project.
            </summary>
            <param name="projectToken">The Whitesource project token for the target project.</param>
            <returns>Returns a dictionary of licenses and counts for a given project.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetAllProductsAsync(Whitesource.Api.Token.OrgToken)">
            <summary>
            Returns a list of products for a given organization.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <returns>Returns a list of products for the given organization token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetAllProjectsAsync(Whitesource.Api.Token.ProductToken)">
            <summary>
            Returns a list of projects for a given product.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns a list of projects for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetOrganizationProjectVitalsAsync(Whitesource.Api.Token.OrgToken)">
            <summary>
            Get basic information regarding all projects within the organization: name, token, creation date and last updated date.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <returns>Returns a list of projects for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetOrganizationProductVitalsAsync(Whitesource.Api.Token.OrgToken)">
            <summary>
            Get basic information regarding all products within the organization: name, token, creation date and last updated date.
            </summary>
            <param name="orgToken">The Whitesource organization token for the target organization.</param>
            <returns>Returns the vitals within the organization for all products.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProductProjectVitalsAsync(Whitesource.Api.Token.ProductToken)">
            <summary>
            Get basic information regarding all projects for a specific product: name, token, creation date and last updated date.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns the vitals within the organization for all products.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProjectVitalsAsync(Whitesource.Api.Token.ProjectToken)">
            <summary>
            Get basic information for a specific project: name, token, creation date and last updated date.
            </summary>
            <param name="projectToken">The project token.</param>
            <returns>Returns the vitals within the organization for all products.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProductLibraryLocationsAsync(Whitesource.Api.Token.ProductToken)">
            <summary>
            Returns a list of library locations for a given product.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns a list of library locations for the given product token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProjectLibraryLocationsAsync(Whitesource.Api.Token.ProjectToken)">
            <summary>
            Returns a list of library locations for a given project.
            </summary>
            <param name="projectToken">The Whitesource project token for the target project.</param>
            <returns>Returns a list of library locations for the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProjectHierarchyAsync(Whitesource.Api.Token.ProjectToken,System.Boolean)">
            <summary>
            Returns the library hierarchy for a given project.
            </summary>
            <param name="projectToken">The project token.</param>
            <param name="includeInHouseData">An optional parameter to determine whether in-house data should be included 
            in the hierarchy. The default is <c>true</c> which means to include the in-house data.</param>
            <returns>Returns a the library hierarchy for the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProjectInventoryAsync(Whitesource.Api.Token.ProjectToken,System.Boolean)">
            <summary>
            Returns the library inventory for a given project.
            </summary>
            <param name="projectToken">The project token.</param>
            <param name="includeInHouseData">An optional parameter to determine whether in-house data should be included 
            in the hierarchy. The default is <c>true</c> which means to include the in-house data.</param>
            <returns>Returns the library inventory for the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProjectStateAsync(Whitesource.Api.Token.ProjectToken)">
            <summary>
            Returns the state for a given project.
            </summary>
            <param name="projectToken">The project token.</param>
            <returns>Returns the project state for the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetLibrarySourceFilesAsync(Whitesource.Api.Token.ProjectToken,System.String)">
            <summary>
            Returns the source files for a library within a given project.
            </summary>
            <param name="projectToken">The project token.</param>
            <param name="uuid">The UUID for the library to retrieve source files for.</param>
            <returns>Returns the source files for a library within the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetProjectLibraryDependenciesAsync(Whitesource.Api.Token.ProjectToken,System.String)">
            <summary>
            Returns the dependencies for a library within a given project.
            </summary>
            <param name="projectToken">The project token.</param>
            <param name="uuid">The UUID for the library to retrieve the dependencies for.</param>
            <returns>Returns the source files for a library within the given project token.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
        <member name="M:Whitesource.Api.WhitesourceServiceAsync.GetLicensesTextZipAsync(Whitesource.Api.Token.ProductToken)">
            <summary>
            Returns a zipfile containing the text of all of licenses for a given product.
            </summary>
            <param name="productToken">The Whitesource product token for the target product.</param>
            <returns>Returns a zipfile containing the text of all of licenses for a given product.</returns>
            <exception cref="T:Whitesource.Api.WhitesourceRequestException">Thrown if an exception occurs calling Whitesource service.</exception>
        </member>
    </members>
</doc>
